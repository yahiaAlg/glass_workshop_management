from import_export import resources, fields, widgets
from import_export.widgets import ForeignKeyWidget
from .models import GlassProduct, GlassType, GlassThickness, GlassColor, GlassFinish, Unit

class GlassProductResource(resources.ModelResource):
    # Foreign key fields with custom widgets
    glass_type = fields.Field(
        column_name='glass_type',
        attribute='glass_type',
        widget=ForeignKeyWidget(GlassType, 'code')
    )
    
    thickness = fields.Field(
        column_name='thickness',
        attribute='thickness',
        widget=ForeignKeyWidget(GlassThickness, 'value')
    )
    
    color = fields.Field(
        column_name='color',
        attribute='color',
        widget=ForeignKeyWidget(GlassColor, 'code')
    )
    
    finish = fields.Field(
        column_name='finish',
        attribute='finish',
        widget=ForeignKeyWidget(GlassFinish, 'code')
    )
    
    unit = fields.Field(
        column_name='unit',
        attribute='unit',
        widget=ForeignKeyWidget(Unit, 'code')
    )
    
    # Computed fields for export
    profit_margin = fields.Field(
        column_name='profit_margin',
        attribute='profit_margin',
        readonly=True
    )
    
    is_low_stock = fields.Field(
        column_name='is_low_stock',
        attribute='is_low_stock',
        readonly=True
    )
    
    class Meta:
        model = GlassProduct
        fields = (
            'code', 'name', 'description', 'glass_type', 'thickness', 
            'color', 'finish', 'unit', 'cost_price', 'selling_price',
            'stock_quantity', 'minimum_stock', 'category', 'status',
            'profit_margin', 'is_low_stock'
        )
        export_order = fields
        import_id_fields = ('code',)
        skip_unchanged = True
        report_skipped = False
    
    def before_import_row(self, row, **kwargs):
        """Process row before import"""
        # Auto-generate code if not provided
        if not row.get('code'):
            row['code'] = None  # Will be generated by model save method
    
    def dehydrate_profit_margin(self, glass_product):
        """Export profit margin as percentage"""
        return f"{glass_product.profit_margin():.1f}%"
    
    def dehydrate_is_low_stock(self, glass_product):
        """Export low stock status"""
        return glass_product.is_low_stock()


# Resources for reference data tables
class GlassTypeResource(resources.ModelResource):
    class Meta:
        model = GlassType
        fields = ('code', 'name', 'is_active')
        import_id_fields = ('code',)


class GlassThicknessResource(resources.ModelResource):
    class Meta:
        model = GlassThickness
        fields = ('value', 'display_name', 'is_active')
        import_id_fields = ('value',)


class GlassColorResource(resources.ModelResource):
    class Meta:
        model = GlassColor
        fields = ('code', 'name', 'is_active')
        import_id_fields = ('code',)


class GlassFinishResource(resources.ModelResource):
    class Meta:
        model = GlassFinish
        fields = ('code', 'name', 'is_active')
        import_id_fields = ('code',)


class UnitResource(resources.ModelResource):
    class Meta:
        model = Unit
        fields = ('code', 'name', 'is_active')
        import_id_fields = ('code',)